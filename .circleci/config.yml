version: 2.1

jobs:
  build:
    parameters:
      docker_image:
        type: string
        default: ""
      apt_get:
        type: string
        default: ""
      cmake_compiler:
        type: string
        default: ""
      cmake_args:
        type: string
        default: ""
    docker:
      - image: << parameters.docker_image >>
    steps:
      - checkout
      - run:
          name: Install apt packages
          command: |
            apt-get update
            apt-get install -y git-core build-essential cmake libprotobuf-dev protobuf-compiler << parameters.apt_get >>
      - run:
          name: Initialize submodules
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake ../ \
              << parameters.cmake_compiler >> \
              << parameters.cmake_args >>
            make
      - run:
          name: Test
          command: |
            build/tensorpipe/test/common/defs_test
            build/tensorpipe/test/common/system_test
            build/tensorpipe/test/util/shm/segment_test
            build/tensorpipe/test/util/ringbuffer/ringbuffer_test
            build/tensorpipe/test/util/ringbuffer/shm_ringbuffer_test
            build/tensorpipe/test/proto/all_test
            build/tensorpipe/test/transport/shm/transport_shm_test
            build/tensorpipe/test/transport/uv/transport_uv_test
            build/tensorpipe/test/channel/channel_test
            build/tensorpipe/test/channel/basic/channel_basic_test
            build/tensorpipe/test/core/core_context_test
  format:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            apt-get update
            apt-get install -y git-core clang-format-8
      - run:
          name: Verify clang-format
          command: |
             git ls-files | grep -E  '.[cc|h]$' | xargs clang-format-8 -i
             if git diff --quiet; then
               echo "Formatting OK!"
             else
               echo "Formatting not OK!"
               echo "------------------"
               git --no-pager diff --color
               exit 1
             fi

workflows:
  build:
    jobs:
      - build:
          name: gcc5
          docker_image: ubuntu:18.04
          apt_get: "gcc-5 g++-5"
          cmake_compiler: -DCMAKE_C_COMPILER=gcc-5 -DCMAKE_CXX_COMPILER=g++-5
      - build:
          name: gcc7
          docker_image: ubuntu:18.04
          apt_get: "gcc-7 g++-7"
          cmake_compiler: -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7
      - build:
          name: clang6
          docker_image: ubuntu:18.04
          apt_get: "clang-6.0"
          cmake_compiler: -DCMAKE_C_COMPILER=clang-6.0 -DCMAKE_CXX_COMPILER=clang++-6.0
      - build:
          name: gcc7-asan
          docker_image: ubuntu:18.04
          apt_get: "gcc-7 g++-7"
          cmake_compiler: -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7 -DSANITIZE=address
      - build:
          name: gcc7-tsan
          docker_image: ubuntu:18.04
          apt_get: "gcc-7 g++-7"
          cmake_compiler: -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7 -DSANITIZE=thread
      - format:
          name: clang-format
