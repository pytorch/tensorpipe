version: 2.1

jobs:
  build:
    parameters:
      docker_image:
        type: string
        default: ""
      apt_get:
        type: string
        default: ""
      c_compiler:
        type: string
        default: ""
      cxx_compiler:
        type: string
        default: ""
      cmake_args:
        type: string
        default: ""
    docker:
      - image: << parameters.docker_image >>
    steps:
      - checkout
      - run:
          name: Install apt packages
          command: |
            apt-get update
            apt-get install -y git-core build-essential cmake libprotobuf-dev protobuf-compiler << parameters.apt_get >>
      - run:
          name: Initialize submodules
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake ../ \
              -DCMAKE_C_FLAGS="-Werror -Wno-deprecated-declarations" \
              -DCMAKE_CXX_FLAGS="-Werror -Wno-deprecated-declarations" \
              -DCMAKE_C_COMPILER=<< parameters.c_compiler >> \
              -DCMAKE_CXX_COMPILER=<< parameters.cxx_compiler >> \
              << parameters.cmake_args >>
            make -j
      - run:
          name: Test
          command: |
            cd build
            CTEST_OUTPUT_ON_FAILURE=1 make test
  build_osx:
    macos:
      xcode: 11.3.1
    steps:
      - checkout
      - run:
          name: Install homebrew packages
          command: |
            brew install cmake protobuf
      - run:
          name: Initialize submodules
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake ../ \
              -DCMAKE_C_FLAGS="-Werror -Wno-deprecated-declarations" \
              -DCMAKE_CXX_FLAGS="-Werror -Wno-deprecated-declarations"
            make -j
      - run:
          name: Test
          command: |
            cd build
            CTEST_OUTPUT_ON_FAILURE=1 make test
  python:
    parameters:
      docker_image:
        type: string
        default: ""
      apt_get:
        type: string
        default: ""
    docker:
      - image: << parameters.docker_image >>
    steps:
      - checkout
      - run:
          name: Install apt packages
          command: |
            apt-get update
            apt-get install -y git-core build-essential cmake libprotobuf-dev protobuf-compiler python3-dev python3-venv << parameters.apt_get >>
      - run:
          name: Initialize submodules
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Build
          command: |
            python3 -m venv venv
            source venv/bin/activate
            python3 setup.py install
      - run:
          name: Test
          command: |
            source venv/bin/activate
            python3 tensorpipe/test/python/tensorpipe.py
  format:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: Install clang-format
          command: |
            apt-get update
            apt-get install -y git-core clang-format-8
      - run:
          name: Verify clang-format
          command: |
             git ls-files | grep -E  '.[cc|h]$' | xargs clang-format-8 -i
             if git diff --quiet; then
               echo "Formatting OK!"
             else
               echo "Formatting not OK!"
               echo "------------------"
               git --no-pager diff --color
               exit 1
             fi

workflows:
  build:
    jobs:
      - build:
          name: gcc5
          docker_image: ubuntu:18.04
          apt_get: "gcc-5 g++-5"
          c_compiler: gcc-5
          cxx_compiler: g++-5
      - build:
          name: gcc7
          docker_image: ubuntu:18.04
          apt_get: "gcc-7 g++-7"
          c_compiler: gcc-7
          cxx_compiler: g++-7
      - build:
          name: clang6
          docker_image: ubuntu:18.04
          apt_get: "clang-6.0"
          c_compiler: clang-6.0
          cxx_compiler: clang++-6.0
      - build:
          name: gcc7-asan
          docker_image: ubuntu:18.04
          apt_get: "gcc-7 g++-7"
          c_compiler: gcc-7
          cxx_compiler: g++-7
          cmake_args: -DSANITIZE=address
      - build:
          name: gcc7-tsan
          docker_image: ubuntu:18.04
          apt_get: "gcc-7 g++-7"
          c_compiler: gcc-7
          cxx_compiler: g++-7
          cmake_args: -DSANITIZE=thread
      - build_osx:
          name: OSX
      - python:
          name: python
          docker_image: ubuntu:18.04
          apt_get: "clang-6.0"
      - format:
          name: clang-format
